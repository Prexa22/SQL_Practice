-- Use hospital.db dataset from https://www.sql-practice.com/
SELECT * FROM patients
SELECT * FROM admissions
SELECT * FROM doctors

--===Easy

-- 1. Show first name, last name, and gender of patients whose gender is 'M'
SELECT first_name, last_name, gender 
FROM patients 
WHERE gender = 'M'

--2. Show first name and last name of patients who does not have allergies. (null)
SELECT first_name, last_name 
FROM patients 
WHERE allergies IS NULL

--3. Show first name of patients that start with the letter 'C'
SELECT first_name 
FROM patients 
where first_name LIKE 'C%'

--4. Show first name and last name of patients that weight within the range of 100 to 120 (inclusive)
SELECT first_name,last_name 
FROM patients 
where weight between 100 AND 120

--5. Update the patients table for the allergies column. If the patient's allergies is null then replace it with 'NKA'
update patients SET allergies = 'NKA'
WHERE allergies is NULL 

--6. Show first name and last name concatinated into one column to show their full name.
SELECT CONCAT(first_name, ' ', last_name) AS full_name 
FROM patients

--7. Show first name, last name, and the full province name of each patient.Example: 'Ontario' instead of 'ON'
select first_name, last_name, province_name
from patients PA
join province_names PN oN PA.province_id = PN.province_id

--8. Show how many patients have a birth_date with 2010 as the birth year.
SELECT COUNT(*) 
FROM patients 
WHERE YEAR(birth_date) = 2010

--9. Show the first_name, last_name, and height of the patient with the greatest height.
SELECT first_name, last_name, MAX(height) 
FROM patients 

--10. Show all columns for patients who have one of the following patient_ids:1,45,534,879,1000
SELECT * FROM patients 
WHERE patient_id IN (1,45,534,879,1000)

--11. Show the total number of admissions
SELECT COUNT(*) 
FROM admissions

--12. Show all the columns from admissions where the patient was admitted and discharged on the same day.
SELECT * FROM admissions 
WHERE admission_date = discharge_date

--13. Show the patient id and the total number of admissions for patient_id 579.
SELECT patient_id, COUNT(*) 
FROM admissions 
WHERE patient_id = 579
GROUP BY patient_id

--14. Based on the cities that our patients live in, show unique cities that are in province_id 'NS'?
SELECT DISTINCT CITY 
FROM patients
WHERE province_id = 'NS'

--15. Write a query to find the first_name, last name and birth date of patients who has height greater than 160 and weight greater than 70
select first_name, last_name, birth_date 
FROM patients
where height > 160 AND weight > 70

--16. Write a query to find list of patients first_name, last_name, and allergies from Hamilton where allergies are not null
select first_name, last_name, allergies
FROM patients
WHERE city = 'Hamilton' AND allergies IS not null

--===Medium

--17. Show unique birth years from patients and order them by ascending.
select distinct year(birth_date)
FROM patients
order by year(birth_date)

--18. Show unique first names from the patients table which only occurs once in the list.For example, if two or more people are named 'John' in the first_name column then don't include their name in the output list. If only 1 person is named 'Leo' then include them in the output.
select first_name
FROM patients
group by first_name
having count(*) = 1

--19. Show patient_id and first_name from patients where their first_name start and ends with 's' and is at least 6 characters long.
select patient_id, first_name
from patients where first_name like 'S__%__S'

--20. Show patient_id, first_name, last_name from patients whos diagnosis is 'Dementia'.Primary diagnosis is stored in the admissions table.
select P.patient_id, first_name,last_name
from patients P
JOIN admissions A ON P.patient_id = A.patient_id
where diagnosis = 'Dementia'

--21. Display every patient's first_name.Order the list by the length of each name and then by alphbetically
SELECT first_name
FROM patients
order by len(first_name), first_name

--22. Show the total amount of male patients and the total amount of female patients in the patients table.Display the two results in the same row.
SELECT (SELECT COUNT(*) FROM patients WHERE gender = 'M') AS Male_Count,
	   (SELECT count(*) FROM patients WHERE gender = 'F') as Female_Count

--23. Show first and last name, allergies from patients which have allergies to either 'Penicillin' or 'Morphine'. Show results ordered ascending by allergies then by first_name then by last_name.
select first_name, last_name, allergies
from patients
where allergies in ('Penicillin', 'Morphine')
order by allergies, first_name, last_name

--24. Show patient_id, diagnosis from admissions. Find patients admitted multiple times for the same diagnosis.
select patient_id, diagnosis
from admissions
group by patient_id, diagnosis
having count(*) > 1

--25. Show the city and the total number of patients in the city.Order from most to least patients and then by city name ascending.
select city, count(*)
from patients
group by city
order by count(*) desc, city

--26. Show first name, last name and role of every person that is either patient or doctor.The roles are either "Patient" or "Doctor"
--# union all because either patient or doctor. else union : union all give records which are only patients or only doctors
select first_name, last_name, 'Patient' as role
from patients
union all
select first_name, last_name, 'Doctor' as role
from doctors

--27. Show all allergies ordered by popularity. Remove NULL values from query.
select allergies
from patients
where allergies is not null
group by allergies
order by count(*) desc

--28. Show all patient's first_name, last_name, and birth_date who were born in the 1970s decade. Sort the list starting from the earliest birth_date.
select first_name, last_name, birth_date
from patients
where year(birth_date) between 1970 and 1979
order by birth_date

--29. We want to display each patient's full name in a single column. Their last_name in all upper letters must appear first, then first_name in all lower case letters. Separate the last_name and first_name with a comma. Order the list by the first_name in decending orderEX: SMITH,jane
select concat(upper(last_name),',',lower(first_name)) as full_name
from patients
order by first_name desc

--30. Show the province_id(s), sum of height; where the total sum of its patient's height is greater than or equal to 7,000.
select province_id, sum(height)
from patients
group by province_id
having sum(height) >= 7000

--31. Show the difference between the largest weight and smallest weight for patients with the last name 'Maroni'
select max(weight) - min(weight)
from patients
where last_name = 'Maroni'

--32. Show all of the days of the month (1-31) and how many admission_dates occurred on that day. Sort by the day with most admissions to least admissions.
select day(admission_date), count(*) as no_of_admissions_per_day from admissions
group by day(admission_date)
order by count(*) desc

--33. Show all columns for patient_id 542's most recent admission_date.
select * from admissions
where patient_id = 542
order by admission_date desc
limit 1

--34. Show patient_id, attending_doctor_id, and diagnosis for admissions that match one of the two criteria: 1. patient_id is an odd number and attending_doctor_id is either 1, 5, or 19.      2. attending_doctor_id contains a 2 and the length of patient_id is 3 characters.
select patient_id, attending_doctor_id, diagnosis
from admissions
where
(patient_id % 2 <> 0 and attending_doctor_id in (1,5,19))
||
(attending_doctor_id like '%2%' and len(patient_id) = 3)

--35. Show first_name, last_name, and the total number of admissions attended for each doctor.Every admission has been attended by a doctor.
select first_name, last_name, count(patient_id)
from doctors D
join admissions A ON D.doctor_id = A.attending_doctor_id
group by first_name, last_name

--36. For each doctor, display their id, full name, and the first and last admission date they attended.
SELECT doctor_id, concat(first_name, ' ', last_name) AS full_name,
min(admission_date) as first_admission_date, max(admission_date) as last_admission_date
from doctors D
join admissions A ON D.doctor_id = A.attending_doctor_id
group by doctor_id

--37. Display the total amount of patients for each province. Order by descending.
SELECT province_name, count(patient_id)
FROM patients PA 
JOIN province_names PN ON PA.province_id = PN.province_id
group by province_name
ORDER BY count(patient_id) DESC

--38. For every admission, display the patient's full name, their admission diagnosis, and their doctor's full name who diagnosed their problem.
select concat(P.first_name, ' ', P.last_name) patients_fullname, diagnosis, concat(D.first_name, ' ', D.last_name) AS doctors_fullname
FROM patients P 
join admissions A ON P.patient_id = A.patient_id
join doctors D ON A.attending_doctor_id = D.doctor_id

--39. display the number of duplicate patients based on their first_name and last_name.
select first_name, last_name, count(*)
from patients
group by first_name, last_name
having count(*) > 1

--40. Display patient's full name,height in the units feet rounded to 1 decimal,weight in the unit pounds rounded to 0 decimals,birth_date,gender non abbreviated.Convert CM to feet by dividing by 30.48. Convert KG to pounds by multiplying by 2.205.
select concat(first_name, ' ', last_name) as full_name,
round(height/30.48,1) as height_in_feet_round_to_1_decimal,
round(weight*2.205) as weight_in_pounds,
birth_date, case when gender = 'M' THEN 'Male' else 'Female' END
FROM patients

--41. Show patient_id, first_name, last_name from patients whose does not have any records in the admissions table. (Their patient_id does not exist in any admissions.patient_id rows.)
SELECT P.patient_id, first_name, last_name
from patients P 
leFT JOIN admissions A ON P.patient_id = A.patient_id
WHERE A.patient_id IS NULL

--42. Show all of the patients grouped into weight groups. Show the total amount of patients in each weight group. Order the list by the weight group decending. For example, if they weight 100 to 109 they are placed in the 100 weight group, 110-119 = 110 weight group, etc.
with CTE as 
(
	SELECT floor(weight/10 * 10) MIN_LIMIT, floor(weight/10 * 10) + 9 MAX_LIMIT
  	FROM patients 
    group by floor(weight/10 * 10)
)
SELECT COUNT(*), MIN_LIMIT FROM CTE
JOIN patients ON weight between MIN_LIMIT AND MAX_LIMIT
GROUP BY MIN_LIMIT
ORDER BY MIN_LIMIT DESC

--43. Show patient_id, weight, height, isObese from the patients table.Display isObese as a boolean 0 or 1.Obese is defined as weight(kg)/(height(m)2) >= 30.weight is in units kg.height is in units cm.
SELECT patient_id, weight, height, 
CASE 
	WHEN weight / power(height/100.0,2) >= 30 THEN 1 ELSE 0 
END AS isObese
from patients

--44. Show patient_id, first_name, last_name, and attending doctor's specialty.Show only the patients who has a diagnosis as 'Epilepsy' and the doctor's first name is 'Lisa'. Check patients, admissions, and doctors tables for required information.
select P.patient_id, P.first_name, P.last_name, D.specialty
from patients P
join admissions A ON P.patient_id = A.patient_id
JOIN doctors D ON A.attending_doctor_id = D.doctor_id
WHERE diagnosis = 'Epilepsy' AND D.first_name = 'Lisa'

--45. All patients who have gone through admissions, can see their medical documents on our site. Those patients are given a temporary password after their first admission. Show the patient_id and temp_password. The password must be the following, in order: 1. patient_id 2. the numerical length of patient's last_name 3. year of patient's birth_date
SELECT DISTINCT P.patient_id,
concat(P.patient_id, LEN(P.last_name), YEAR(birth_date)) AS temp_password
from patients P 
join admissions A ON P.patient_id = A.patient_id

--46. Each admission costs $50 for patients without insurance, and $10 for patients with insurance. All patients with an even patient_id have insurance. Give each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. Add up the admission_total cost for each has_insurance group.
SELECT 
CASE 
	WHEN patient_id % 2 = 0 THEN 'Yes'
    else 'No'
END AS has_insurance, 
sum(case when patient_id % 2 = 0 THEN 10
	else 50
end) as cost_after_insurance
from admissions
group by has_insurance

--47. Show the provinces that has more patients identified as 'M' than 'F'. Must only show full province_name
SELECT province_name
FROM patients P 
JOIN province_names PN ON P.province_id = PN.province_id
group by province_name
having SUM(case when gender = 'M' THEN 1 ELSE 0 END) > SUM(case when gender = 'F' THEN 1 ELSE 0 END)

--48. We are looking for a specific patient. Pull all columns for the patient who matches the following criteria: - First_name contains an 'r' after the first two letters. - Identifies their gender as 'F'. - Born in February, May, or December. - Their weight would be between 60kg and 80kg. - Their patient_id is an odd number. - They are from the city 'Kingston'.
SELECT *
FROM patients
where first_name LIKE '__r%'
and gender = 'F' 
AND MONTH(birth_date) IN (2, 5, 12)
AND weight between 60 AND 80
AND patient_id % 2 <> 0
AND city = 'Kingston'

--49. Show the percent of patients that have 'M' as their gender. Round the answer to the nearest hundreth number and in percent form.
SELECT CONCAT(ROUND((SELECT count(*)
FROM patients
where gender = 'M') * 100.00 / (SELECT count(*) FROM patients),2),'%')

--50. For each day display the total amount of admissions on that day. Display the amount changed from the previous date.
WITH CTE AS
(
  SELECT admission_date, count(*) AS admission_day
  from admissions A1
  group by admission_date
)
SELECT admission_date, admission_day, 
admission_day - LAG(admission_day) OVER (ORDER BY admission_date) AS admission_count_change FROM CTE

--51. Sort the province names in ascending order in such a way that the province 'Ontario' is always on top.
with CTE AS
(
	select province_name, ROW_NUMBER() OVER (PARTITION BY CASE WHEN province_name = 'Ontario' THEN 0 ELSE province_name END ORDER BY province_name) from province_names
)
SELECT province_name FROM CTE

--52. We need a breakdown for the total amount of admissions each doctor has started each year. Show the doctor_id, doctor_full_name, specialty, year, total_admissions for that year.
SELECT doctor_id, concat(first_name, ' ', last_name) AS doctor_full_name, specialty, year(admission_date), 
count(*) total_admission
from admissions A 
JOIN doctors D ON A.attending_doctor_id = D.doctor_id
GROUP BY doctor_id, specialty, year(admission_date)






